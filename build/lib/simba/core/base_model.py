from abc import ABC, abstractmethod
from typing import Any, Dict
import torch
import torch.nn as nn

class BaseModelWrapper(ABC):
    @abstractmethod
    def build(self) -> nn.Module: ...
    @abstractmethod
    def forward(self, batch: Dict[str, Any]) -> Any: ...
    @abstractmethod
    def compute_loss(self, pred: Any, batch: Dict[str, Any]) -> torch.Tensor: ...
    @abstractmethod
    def predict(self, batch: Dict[str, Any]) -> Any: ...
    @abstractmethod
    def save(self, path: str) -> None: ...
    @abstractmethod
    def load(self, path: str) -> None: ...
